{"version":3,"file":"_astro-internal_middleware.mjs","sources":["../../../node_modules/astro/dist/core/middleware/sequence.js","../../../node_modules/astro/dist/core/middleware/index.js"],"sourcesContent":["import { defineMiddleware } from \"./index.js\";\nfunction sequence(...handlers) {\n  const filtered = handlers.filter((h) => !!h);\n  const length = filtered.length;\n  if (!length) {\n    const handler = defineMiddleware((context, next) => {\n      return next();\n    });\n    return handler;\n  }\n  return defineMiddleware((context, next) => {\n    return applyHandle(0, context);\n    function applyHandle(i, handleContext) {\n      const handle = filtered[i];\n      const result = handle(handleContext, async () => {\n        if (i < length - 1) {\n          return applyHandle(i + 1, handleContext);\n        } else {\n          return next();\n        }\n      });\n      return result;\n    }\n  });\n}\nexport {\n  sequence\n};\n","import {\n  computeCurrentLocale,\n  computePreferredLocale,\n  computePreferredLocaleList\n} from \"../../i18n/utils.js\";\nimport { ASTRO_VERSION } from \"../constants.js\";\nimport { AstroCookies } from \"../cookies/index.js\";\nimport { AstroError, AstroErrorData } from \"../errors/index.js\";\nimport { sequence } from \"./sequence.js\";\nconst clientAddressSymbol = Symbol.for(\"astro.clientAddress\");\nconst clientLocalsSymbol = Symbol.for(\"astro.locals\");\nfunction defineMiddleware(fn) {\n  return fn;\n}\nfunction createContext({\n  request,\n  params = {},\n  userDefinedLocales = []\n}) {\n  let preferredLocale = void 0;\n  let preferredLocaleList = void 0;\n  let currentLocale = void 0;\n  const url = new URL(request.url);\n  const route = url.pathname;\n  return {\n    cookies: new AstroCookies(request),\n    request,\n    params,\n    site: void 0,\n    generator: `Astro v${ASTRO_VERSION}`,\n    props: {},\n    redirect(path, status) {\n      return new Response(null, {\n        status: status || 302,\n        headers: {\n          Location: path\n        }\n      });\n    },\n    get preferredLocale() {\n      return preferredLocale ??= computePreferredLocale(request, userDefinedLocales);\n    },\n    get preferredLocaleList() {\n      return preferredLocaleList ??= computePreferredLocaleList(request, userDefinedLocales);\n    },\n    get currentLocale() {\n      return currentLocale ??= computeCurrentLocale(route, userDefinedLocales);\n    },\n    url,\n    get clientAddress() {\n      if (clientAddressSymbol in request) {\n        return Reflect.get(request, clientAddressSymbol);\n      }\n      throw new AstroError(AstroErrorData.StaticClientAddressNotAvailable);\n    },\n    get locals() {\n      let locals = Reflect.get(request, clientLocalsSymbol);\n      if (locals === void 0) {\n        locals = {};\n        Reflect.set(request, clientLocalsSymbol, locals);\n      }\n      if (typeof locals !== \"object\") {\n        throw new AstroError(AstroErrorData.LocalsNotAnObject);\n      }\n      return locals;\n    },\n    // We define a custom property, so we can check the value passed to locals\n    set locals(val) {\n      if (typeof val !== \"object\") {\n        throw new AstroError(AstroErrorData.LocalsNotAnObject);\n      } else {\n        Reflect.set(request, clientLocalsSymbol, val);\n      }\n    }\n  };\n}\nfunction isLocalsSerializable(value) {\n  let type = typeof value;\n  let plainObject = true;\n  if (type === \"object\" && isPlainObject(value)) {\n    for (const [, nestedValue] of Object.entries(value)) {\n      if (!isLocalsSerializable(nestedValue)) {\n        plainObject = false;\n        break;\n      }\n    }\n  } else {\n    plainObject = false;\n  }\n  let result = value === null || type === \"string\" || type === \"number\" || type === \"boolean\" || Array.isArray(value) || plainObject;\n  return result;\n}\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null)\n    return false;\n  let proto = Object.getPrototypeOf(value);\n  if (proto === null)\n    return true;\n  let baseProto = proto;\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto);\n  }\n  return proto === baseProto;\n}\nfunction trySerializeLocals(value) {\n  if (isLocalsSerializable(value)) {\n    return JSON.stringify(value);\n  } else {\n    throw new Error(\"The passed value can't be serialized.\");\n  }\n}\nexport {\n  createContext,\n  defineMiddleware,\n  sequence,\n  trySerializeLocals\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1]}