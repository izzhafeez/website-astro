---
import type Item from 'items/item';
import { allItems, allItemsDict } from 'items/getItems';
import Layout from 'layouts/Layout.astro';
import Description from 'components/utils/Description';
import ItemPreviews from 'components/ItemPreviews';
import LLMap from 'components/map/LLMap.svelte';

export async function getStaticPaths() {
  return allItems.map(item => ({
    params: {
      category: item.category,
      type: item.type,
      key: item.key,
    },
    props: { item }
  }))
};

const item: Item = Astro.props.item;
const related: Item[] = (item.related || []).map(r => {
  const splitted = r.split("/");
  const type: {[key: string]: Item} = allItemsDict[splitted[0]][splitted[1]];
  if (!type) return null;
  return type[splitted[2]] || null;
}).filter((i): i is Item => i !== null).sort((a, b) => (b.importance || 0) - (a.importance || 0));
var imgClass = `bg-white border-${Astro.params.category}-500 dark:border-${Astro.params.category}-300 `
if (item.isBigImage()) imgClass += `h-[30rem] aspect-auto border-[5px] my-4 p-4 mx-auto`;
else imgClass += `size-[15rem] border-[5px] my-4 p-4 rounded-full mx-auto`;
export const prerender = true;
const imgPath = item.imgPath ? `/img/${Astro.params.category}/${Astro.params.type}/${item.imgPath}` : '/img/desmosito-white.png';
---

<Layout>
  <div slot="main">
    <img class={imgClass} src={imgPath}/>
    <div class="grid gap-2">
      <h1 class={`text-3xl font-extrabold text-${Astro.params.category}-500 dark:text-${Astro.params.category}-300`}>{item.title.toUpperCase()}</h1>
      <Description description={item.description} category={Astro.params.category}/>
      <Description description={item.getFields()} category={Astro.params.category}/>
      {item.hasMap() && <LLMap client:only="svelte" locations={item.getLocations()} lines={item.getLines()}/>}
      <ItemPreviews items={related} size="MEDIUM" defaultHeader="RELATED" category={item.category}/>
    </div>
  </div>
</Layout>