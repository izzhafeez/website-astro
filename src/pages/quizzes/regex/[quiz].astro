---
import Seo from "../../../components/seo/Seo.astro";
import Layout from "../../../layouts/Layout.astro";
import NavBar from "../../../components/common/NavBar.astro";
import PageFind from "../../../components/common/PageFind.astro";
import RegexWarrior from "../../../components/quizzes/regex/RegexWarrior.svelte";
import mrtData from "../../../data/quizzes/map/mrt.json";
import countriesData from "../../../data/quizzes/jumble/countries.json";
import fruitVegData from "../../../data/quizzes/jumble/fruit-veg.json";

export const getStaticPaths = (() => {
    const instructions = "Come up with the shortest regex pattern that matches everything with a green border, while excluding everything with a red border. As you're typing the regex, green text means matched and red text means unmatched. The objective is to get all the texts to be the same color as their corresponding borders. Your score is based on the length of your final regex (lower is better)."
    const normaliseString = (name: string) => name.replace(/[\(\[].*?[\)\]]/g, '').trim();
    const filterDuplicates = (array: string[]) => array.filter((value, index, self) => self.indexOf(value) === index).sort((a, b) => a.localeCompare(b));

    return [
        {
            params: {
                quiz: 'mrt'
            },
            props: {
                title: 'MRT Stations of Singapore',
                instructions: instructions,
                data: filterDuplicates(Object.keys(mrtData).map(normaliseString))
            }
        },
        {
            params: {
                quiz: 'countries',
            },
            props: {
                title: 'Countries of the World',
                instructions: instructions,
                data: filterDuplicates(countriesData.map(normaliseString))
            }
        },
        {
            params: {
                quiz: 'fruit-veg',
            },
            props: {
                title: 'Fruits and Vegetables',
                instructions: instructions,
                data: filterDuplicates(fruitVegData.map(normaliseString))
            }
        }
    ]
});

const images = import.meta.glob<{ default: ImageMetadata }>('/src/img/**/*.jpg');
const seoImg = await images[`/src/img/quizzes/jumble/${Astro.params.quiz}.jpg`]().then(img => img.default);
---

<Seo heroText={Astro.props.instructions} {seoImg} pageName={`${Astro.props.title} (Connect Quiz)`} path={`quizzes/connect/${Astro.params.quiz}`}/>

<Layout>
  <div slot="main">
    <NavBar/>
    <PageFind pageName={`${Astro.props.title} (Connect Quiz)`} heroText={Astro.props.instructions}/>
    <RegexWarrior client:load names={Astro.props.data} title={Astro.props.title} instructions={Astro.props.instructions}/>
    <link href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-wordpress-admin/wordpress-admin.css" rel="stylesheet">
    <script is:inline src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  </div>
</Layout>