---
import subzonePopulationData from "../../../data/quizzes/compare/subzone-population.json";
import mrtLongitudeData from "../../../data/quizzes/compare/mrt-longitude.json";
import mrtLatitudeData from "../../../data/quizzes/compare/mrt-latitude.json";
import CompareQuiz from "../../../components/quizzes/compare/CompareQuiz.svelte";
import Layout from "../../../layouts/Layout.astro";
import NavBar from "../../../components/common/NavBar.astro";
import Seo from "../../../components/seo/Seo.astro";
import PageFind from "../../../components/common/PageFind.astro";
import seoImg from '/src/img/heroes/COMPARE.jpg';
import countriesData from "../../../data/games/city-hedger/countries.json";
import citiesData from "../../../data/quizzes/compare/cities.json";
import countryCodesData from "../../../data/games/city-hedger/country-codes.json";

export function getStaticPaths() {
  return Object.entries(countriesData).map(([countryCode, countryData]) => {
    const countryName = countryCodesData[countryCode];
    return [
      {
        params: {
          quiz: `${countryCode}-city-lat`
        },
        props: {
          // data should be {city: lat}
          data: Object.entries(citiesData[countryCode]).reduce((acc, [cityName, cityData]) => {
            acc[cityName] = cityData.lat;
            return acc;
          }, {}),
          title: `${countryName} Cities (Latitude)`,
          decimalPlaces: 4,
          startNumber: 0
        }
      },
      {
        params: {
          quiz: `${countryCode}-city-long`
        },
        props: {
          // data should be {city: lat}
          data: Object.entries(citiesData[countryCode]).reduce((acc, [cityName, cityData]) => {
            acc[cityName] = cityData.long;
            return acc;
          }, {}),
          title: `${countryName} Cities (Longitude)`,
          decimalPlaces: 4,
          startNumber: 0
        }
      },
    ]
  }).flat();
}

export const prerender = true;
const { data, title, decimalPlaces, startNumber } = Astro.props;
const comparator = title.split("(")[1].split(")")[0];
const instructions = `Compare the ${comparator} of the given cities.`;
---
<Seo heroText={instructions} {seoImg} pageName={`${title} (Compare Quiz)`} path={`quizzes/compare/${Astro.params.quiz}`}/>

<Layout>
  <div slot="main">
    <div class="fixed z-50 w-screen">
      <NavBar/>
      <PageFind pageName={`${title} (Compare Quiz)`} heroText={instructions}/>
    </div>
    <CompareQuiz client:load data={data} title={title} instructions={instructions} key={Astro.params.quiz} decimalPlaces={decimalPlaces} startNumber={startNumber || 0}/>
  </div>
</Layout>
<link href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-wordpress-admin/wordpress-admin.css" rel="stylesheet">
<script is:inline src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>