---
import placeNameData from "../../../data/quizzes/streak/place-names.json";
import animeData from "../../../data/quizzes/streak/anime.json";
import awsProductsData from "../../../data/quizzes/streak/aws-products.json";
import helloWorldData from "../../../data/quizzes/streak/hello-world.json";
import nusModsData from "../../../data/quizzes/streak/nus-mods.json";
import ntuModsData from "../../../data/quizzes/streak/ntu-mods.json";
import pythonLibrariesData from "../../../data/quizzes/streak/python-libraries.json";
import statusCodesData from "../../../data/quizzes/streak/status-codes.json";
import StreakQuiz from "../../../components/quizzes/streak/StreakQuiz.svelte";
import NavBar from "../../../components/common/NavBar.astro";
import Layout from "../../../layouts/Layout.astro";
import { fullSanitise } from "../../../utils/string";
import Seo from "../../../components/seo/Seo.astro";
import PageFind from "../../../components/common/PageFind.astro";

export async function getStaticPaths() {
  return [
    {
      params: { quiz: 'anime' },
      props: {
        title: "Anime Descriptions",
        data: animeData,
        instructions: "Guess the anime based on the first line of its description. Answers are case and space-insensitive. Use regex to choose what anime you would like to include in the quiz (tip: try typing 'Naruto' or 'imi' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: 'imi'
      }
    },
    {
      params: { quiz: 'aws-products' },
      props: {
        title: "AWS Products",
        data: awsProductsData,
        instructions: "Guess the AWS product based on the given prompt. Answers are case and space-insensitive. Use regex to choose what products you would like to include in the quiz (tip: try typing 'am' or 'Amazon' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'hello-world' },
      props: {
        title: "Hello World",
        data: helloWorldData,
        instructions: "Guess the language based on the its translation of 'Hello World'. Answers are case and space-insensitive. Use regex to choose what programming languages you would like to include in the quiz (tip: try typing 'J' or 'Arabic' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'place-names' },
      props: {
        title: "Place Names",
        data: placeNameData,
        instructions: "Guess the place name based on the given prompt. Answers are case and space-insensitive. Use regex to choose what place names you would like to include in the quiz (tip: try typing 'Local' or 'Chinese' and see what you get). Just try out the regex and see for yourself! Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'nus-mods' },
      props: {
        title: "NUS Mods",
        data: nusModsData,
        instructions: "Guess the NUS module code based on the given prompt. Answers are case and space-insensitive. Use regex to choose what module codes you would like to include in the quiz (tip: try typing 'CS' or '2001' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'ntu-mods' },
      props: {
        title: "NTU Mods",
        data: ntuModsData,
        instructions: "Guess the NTU module code based on the given prompt. Answers are case and space-insensitive. Use regex to choose what module codes you would like to include in the quiz (tip: try typing 'EE' or '200' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'python-libraries' },
      props: {
        title: "Python Libraries",
        data: pythonLibrariesData,
        instructions: "Guess the Python library based on its description. Answers are case and space-insensitive. Use regex to choose what libraries you would like to include in the quiz (tip: try typing 'pandas' or 'data' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'status-codes' },
      props: {
        title: "Status Codes",
        data: statusCodesData,
        instructions: "Guess the status code based on the given prompt. Answers are case and space-insensitive. Use regex to choose what status codes you would like to include in the quiz (tip: try typing '2' or 'OK' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'thailand-thai' },
      props: {
        title: "Thai Cities in Thai",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("Thailand, Local"))
        ),
        instructions: "Guess the Thai city based on its Thai name. Answers are case and space-insensitive. Use regex to choose what cities you would like to include in the quiz (tip: try typing 'Bangkok' or 'เมือง' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'mrt-chinese' },
      props: {
        title: "MRT Stations in Chinese",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("MRT]"))
        ),
        instructions: "Guess the MRT station based on its Chinese name. Answers are case and space-insensitive. Use regex to choose what stations you would like to include in the quiz (tip: try typing 'Dhoby' or '道' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'school-chinese' },
      props: {
        title: "Schools in Chinese",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("School)"))
        ),
        instructions: "Guess the school based on its Chinese name. Answers are case and space-insensitive. Use regex to choose what schools you would like to include in the quiz (tip: try typing 'NUS' or '大学' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: "vietnam-chinese" },
      props: {
        title: "Vietnamese Cities",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("Vietnam, Chinese"))
        ),
        instructions: "Guess the Vietnamese city based on its Chinese name. Answers are case and space-insensitive. Use regex to choose what cities you would like to include in the quiz (tip: try typing 'Hanoi' or '河内' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: "indian-cities" },
      props: {
        title: "Indian Cities",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("India, Local"))
        ),
        instructions: "Guess the Indian city based on its local name. Answers are case and space-insensitive. Use regex to choose what cities you would like to include in the quiz (tip: try typing 'Mumbai' or 'city' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: {
        quiz: "tokyo-metro",
      },
      props: {
        title: "Tokyo Metro Stations",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("Japan, Chinese, MRT"))
        ),
        instructions: "Guess the Tokyo Metro station based on its Japanese name. Answers are case and space-insensitive. Use regex to choose what stations you would like to include in the quiz (tip: try typing 'Shinjuku' or '新宿' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: {
        quiz: 'hong-kong-towns'
      },
      props: {
        title: "Hong Kong Towns",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("Hong Kong, Local"))
        ),
        instructions: "Guess the Hong Kong town based on its local name. Answers are case and space-insensitive. Use regex to choose what towns you would like to include in the quiz (tip: try typing 'Central' or '中' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: {
        quiz: "korean-cities"
      },
      props: {
        title: "Korean Cities",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("Korea, Chinese"))
        ),
        instructions: "Guess the Korean city based on its Hanja/Chinese name. Answers are case and space-insensitive. Use regex to choose what cities you would like to include in the quiz (tip: try typing 'Seoul' or 'city' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: {
        quiz: "china-cities"
      },
      props: {
        title: "Chinese Cities",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("China, Local, Chinese, City"))
        ),
        instructions: "Guess the Chinese city based on its local name. Answers are case and space-insensitive. Use regex to choose what cities you would like to include in the quiz (tip: try typing 'Beijing' or '京' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      },
    },
    {
      params: { quiz: "taiwan-cities" },
      props: {
        title: "Taiwanese Cities",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("Taiwan, Local"))
        ),
        instructions: "Guess the Taiwanese city based on its local name. Answers are case and space-insensitive. Use regex to choose what cities you would like to include in the quiz (tip: try typing 'Taipei' or '北' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: "japanese-cities" },
      props: {
        title: "Japanese Cities",
        data: Object.fromEntries(
            Object.entries(placeNameData).filter(([key, _]) => key.includes("Japan, Local"))
        ),
        instructions: "Guess the Japanese city based on its local name. Answers are case and space-insensitive. Use regex to choose what cities you would like to include in the quiz (tip: try typing 'Tokyo' or '京' and see what you get). Feel free to choose your preferred difficulty; they all become more difficult the higher your streak goes! Good luck!",
        defaultRegex: ''
      }
    }
  ];
};

export const prerender = true;
const { data } = Astro.props;

type Answer = { prompt: string, fullTerm: string, id: number };
const answerDict: {[k: string]: Answer[]} = {};
const answerList: { answer: string, prompt: string }[] = [];

let id = 0;
for (const [k, v] of Object.entries(data)) {
  const { key, cleanText } = fullSanitise(k);
  if (!(key in answerDict)) answerDict[key] = [];
  answerList.push({ answer: cleanText, prompt: v});
  answerDict[key].push({ fullTerm: k, prompt: v, id });
  id += 1;
}

const images = import.meta.glob<{ default: ImageMetadata }>('/src/img/**/*.jpg');
const seoImg = await images[`/src/img/quizzes/streak/${Astro.params.quiz}.jpg`]().then(img => img.default);
---
<Seo heroText={Astro.props.instructions} pageName={`${Astro.props.title} (Streak Quiz)`} path={`quizzes/streak/${Astro.params.quiz}`}/>

<Layout>
  <div slot="main">
    <NavBar transition:persist/>
    <PageFind pageName={`${Astro.props.title} (Streak Quiz)`} heroText={Astro.props.instructions}/>
    <div class="max-w-6xl mx-auto">
      <div class="p-2">
        <h1 transition:name={Astro.params.quiz} class="text-5xl font-black animate-text bg-gradient-to-r from-ns-500 via-ns-400 to-ns-300 bg-clip-text text-transparent my-6">{Astro.props.title.toUpperCase()}</h1>
        <p transition:name={Astro.props.instructions} class="">{Astro.props.instructions}</p>
      </div>
      <StreakQuiz client:load answerDict={answerDict} answerList={answerList} defaultRegex={Astro.props.defaultRegex ?? ''} key={Astro.params.quiz}/>
    </div>
    <link href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-wordpress-admin/wordpress-admin.css" rel="stylesheet">
    <script is:inline src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  </div>
</Layout>