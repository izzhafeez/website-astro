---
import MapQuiz from "../../../components/quizzes/map/MapQuiz.svelte";
import Leaderboard from "../../../components/quizzes/Leaderboard.svelte";
import { fullSanitise } from "../../../utils/string";
import Location from "../../../components/quizzes/map/Location";
import mrtData from "../../../data/quizzes/map/mrt.json";
import mallsData from "../../../data/quizzes/map/malls.json";
import schoolsData from "../../../data/quizzes/map/schools.json";
import busStopData from "../../../data/quizzes/map/bus-stops.json";
import londonUndergroundData from "../../../data/quizzes/map/london-underground.json";
import tokyoMetroData from "../../../data/quizzes/map/tokyo-metro.json";
import citiesData from "../../../data/quizzes/map/cities.json";
import japanCitiesData from "../../../data/quizzes/map/japan-cities.json";
import franceCitiesData from "../../../data/quizzes/map/france-cities.json";
import chinaCitiesData from "../../../data/quizzes/map/china-cities.json";
import ukCitiesData from "../../../data/quizzes/map/uk-cities.json";
import spainCitiesData from "../../../data/quizzes/map/spain-cities.json";
import portugalCitiesData from "../../../data/quizzes/map/portugal-cities.json";
import italyCitiesData from "../../../data/quizzes/map/italy-cities.json";
import indiaCitiesData from "../../../data/quizzes/map/india-cities.json";
import indonesiaCitiesData from "../../../data/quizzes/map/indonesia-cities.json";
import philippinesCitiesData from "../../../data/quizzes/map/philippines-cities.json";
import usaCitiesData from "../../../data/quizzes/map/usa-cities.json";
import canadaCitiesData from "../../../data/quizzes/map/canada-cities.json";
// import citiesData from "../../../data/quizzes/map/cities.json";
import { getLocationColor } from "../../../components/quizzes/map/colors";
import NavBar from "../../../components/common/NavBar.astro";
import { SEO } from 'astro-seo';
import Layout from "../../../layouts/Layout.astro";
import Footer from "../../../components/common/Footer.astro";

export async function getStaticPaths() {
  return [
    {
      params: { quiz: 'mrt' },
      props: {
        title: 'MRT Stations of Singapore',
        data: mrtData,
        instructions: "How many MRT/LRT stations can you name? As you answer, the marker will disappear. Use regex to select the stations you want included in the quiz (tip: try typing 'EW' or 'oo' and see what they do). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'malls' },
      props: {
        title: 'Malls of Singapore',
        data: mallsData,
        instructions: "How many malls in Singapore can you name? As you answer, the marker will disappear. Use regex to select the malls you want included in the quiz (tip: try using '300S', '200S', '100S' and '50S' to filter based on the number of stores). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100S|200S|300S'
      }
    },
    {
      params: { quiz: 'schools' },
      props: {
        title: "Schools of Singapore",
        data: schoolsData,
        instructions: "How many schools in Singapore can you name? As you answer, the marker will disappear. Use regex to select the schools you want included in the quiz (tip: try typing 'Secondary' or 'ang' and see what they do). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: 'Secondary|Primary'
      }
    },
    {
      params: { quiz: 'bus-stops' },
      props: {
        title: "Bus Stops of Singapore",
        data: busStopData,
        instructions: "How many bus stops in Singapore can you name? As you answer, the marker will disappear. Use regex to select the bus stops you want included in the quiz (tip: try typing 'BUS126' or 'oo' and see what they do). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: 'Bt'
      }
    },
    {
      params: { quiz: 'london-underground' },
      props: {
        title: "London Underground Stations",
        data: londonUndergroundData,
        instructions: "How many London Underground stations can you name? As you answer, the marker will disappear. Use regex to select the stations you want included in the quiz (tip: try typing 'Bakerloo' or 'oo' and see what they do). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'tokyo-metro' },
      props: {
        title: "Tokyo Metro Stations",
        data: tokyoMetroData,
        instructions: "How many Tokyo Metro stations can you name? As you answer, the marker will disappear. Use regex to select the stations you want included in the quiz (tip: try typing 'Ginza' or 'oo' and see what they do). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: ''
      }
    },
    {
      params: { quiz: 'cities' },
      props: {
        title: 'Cities of the World',
        data: citiesData,
        instructions: "How many cities with at least 100K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M or 100K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '1M|10M'
      }
    },
    {
      params: { quiz: 'japan-cities' },
      props: {
        title: 'Cities of Japan',
        data: japanCitiesData,
        instructions: "How many Japanese cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'france-cities' },
      props: {
        title: 'Cities of France',
        data: franceCitiesData,
        instructions: "How many French cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'china-cities' },
      props: {
        title: 'Cities of China',
        data: chinaCitiesData,
        instructions: "How many Chinese cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'uk-cities' },
      props: {
        title: 'Cities of the UK',
        data: ukCitiesData,
        instructions: "How many UK cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'spain-cities' },
      props: {
        title: 'Cities of Spain',
        data: spainCitiesData,
        instructions: "How many Spanish cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'portugal-cities' },
      props: {
        title: 'Cities of Portugal',
        data: portugalCitiesData,
        instructions: "How many Portuguese cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'italy-cities' },
      props: {
        title: 'Cities of Italy',
        data: italyCitiesData,
        instructions: "How many Italian cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'india-cities' },
      props: {
        title: 'Cities of India',
        data: indiaCitiesData,
        instructions: "How many Indian cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'indonesia-cities' },
      props: {
        title: 'Cities of Indonesia',
        data: indonesiaCitiesData,
        instructions: "How many Indonesian cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'philippines-cities' },
      props: {
        title: 'Cities of the Philippines',
        data: philippinesCitiesData,
        instructions: "How many Filipino cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'usa-cities' },
      props: {
        title: 'Cities of the United States',
        data: usaCitiesData,
        instructions: "How many American cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    },
    {
      params: { quiz: 'canada-cities' },
      props: {
        title: 'Cities of Canada',
        data: canadaCitiesData,
        instructions: "How many Canadian cities with at least 1K population can you name? As you answer, the marker will disappear. Use regex to select the cities you want included in the quiz (try typing 10M, 1M, 100K, 10K or 1K to see what happens). You get 5 seconds for every possible answer. Good luck!",
        defaultRegex: '100K|1M|10M'
      }
    }
  ]
}

export const prerender = true;
const { data } = Astro.props;
type LocationDictItem = {
  searchTerms: string,
  cleanText: string,
  id: number,
  toInclude: boolean
}
const locationDict: {[key: string]: LocationDictItem[]} = {};
const locationList: Location[] = [];

for (const [k, v] of Object.entries(data)) {
  const { searchTerms, key, cleanText } = fullSanitise(k);
  const [lng, lat] = v as number[];
  const location = new Location({
    lat, lng, label: cleanText, color: getLocationColor(k, Astro.params.quiz)
  });
  locationList.push(location);
  if (!(key in locationDict)) locationDict[key] = [];
  const locationDictItem = {
    searchTerms,
    cleanText,
    id: locationList.length-1,
    toInclude: true
  }
  locationDict[key].push(locationDictItem);
}
const images = import.meta.glob<{ default: ImageMetadata }>('/src/img/**/*.jpg');
const seoImg = await images[`/src/img/quizzes/map/${Astro.params.quiz}.jpg`]().then(img => img.default.src);
---
<SEO
  title={`${Astro.props.title} | Izz Hafeez`}
  description={Astro.props.instructions}
  canonical={`https://izzhafeez.com/quizzes/map/${Astro.params.quiz}`}
  openGraph={{
    basic: {
      title: `${Astro.props.title} | Izz Hafeez`,
      type: "website",
      image: seoImg,
      url: `https://izzhafeez.com/quizzes/map/${Astro.params.quiz}`
    }
  }}
  extend={{
    // extending the default link tags
    link: [{ rel: "icon", href: "/favicon.png" }],
    // extending the default meta tags
    meta: [
      {
        name: "twitter:image",
        content: seoImg,
      },
      { name: "twitter:title", content: `${Astro.props.title} | Izz Hafeez`},
      { name: "twitter:description", content: Astro.props.instructions },
    ],
  }}
/>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
  crossorigin=""/>
<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
  integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
  crossorigin=""></script>
<Layout>
  <div slot="main" class="">
    <NavBar/>
    <div class="p-2">
      <h1 transition:name={Astro.params.quiz} class="text-5xl font-extrabold animate-linear bg-[length:200%_auto] bg-gradient-to-r from-ns-500 to-ns-300 dark:from-ns-500 dark:to-ns-100 text-transparent bg-clip-text my-6">{Astro.props.title}</h1>
      <p transition:name={Astro.props.instructions} class="text-gray-500 max-w-3xl">{Astro.props.instructions}</p>
    </div>
    <MapQuiz client:only="svelte" key={Astro.params.quiz} locationDict={locationDict} locationList={locationList} defaultRegex={Astro.props.defaultRegex || ''}/>
    <Footer site="quizzes"/>
  </div>
</Layout>
<link href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-minimal@4/minimal.css" rel="stylesheet">
<script is:inline src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>